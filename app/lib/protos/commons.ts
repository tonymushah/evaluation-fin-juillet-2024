// @generated by protobuf-ts 2.9.4 with parameter server_none
// @generated from protobuf file "commons.proto" (package "mg.tonymushah.evalfjuil24", syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mg.tonymushah.evalfjuil24.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message mg.tonymushah.evalfjuil24.Date
 */
export interface Date {
    /**
     * @generated from protobuf field: uint32 jour = 1;
     */
    jour: number;
    /**
     * @generated from protobuf field: uint32 mois = 2;
     */
    mois: number;
    /**
     * @generated from protobuf field: uint32 annee = 3;
     */
    annee: number;
}
/**
 * @generated from protobuf message mg.tonymushah.evalfjuil24.Etudiant
 */
export interface Etudiant {
    /**
     * @generated from protobuf field: string numero = 1;
     */
    numero: string;
    /**
     * @generated from protobuf field: string nom = 2;
     */
    nom: string;
    /**
     * @generated from protobuf field: string prenom = 3;
     */
    prenom: string;
    /**
     * @generated from protobuf field: mg.tonymushah.evalfjuil24.Date date_naissance = 4;
     */
    dateNaissance?: Date;
    /**
     * @generated from protobuf field: uint32 age = 5;
     */
    age: number;
    /**
     * @generated from protobuf field: string promotion = 6;
     */
    promotion: string;
    /**
     * @generated from protobuf field: mg.tonymushah.evalfjuil24.Genre genre = 7;
     */
    genre: Genre;
}
/**
 * @generated from protobuf message mg.tonymushah.evalfjuil24.Matiere
 */
export interface Matiere {
    /**
     * @generated from protobuf field: string numero = 1;
     */
    numero: string;
    /**
     * @generated from protobuf field: string nom = 2;
     */
    nom: string;
    /**
     * @generated from protobuf field: uint32 credits = 3;
     */
    credits: number;
}
/**
 * @generated from protobuf message mg.tonymushah.evalfjuil24.ReleveNoteUnit
 */
export interface ReleveNoteUnit {
    /**
     * @generated from protobuf field: mg.tonymushah.evalfjuil24.Matiere matiere = 1;
     */
    matiere?: Matiere;
    /**
     * @generated from protobuf field: float valeur = 2;
     */
    valeur: number;
    /**
     * @generated from protobuf field: mg.tonymushah.evalfjuil24.ReleveNoteUnitStatus status = 3;
     */
    status: ReleveNoteUnitStatus;
}
/**
 * @generated from protobuf message mg.tonymushah.evalfjuil24.ReleveNote
 */
export interface ReleveNote {
    /**
     * @generated from protobuf field: repeated mg.tonymushah.evalfjuil24.ReleveNoteUnit notes = 1;
     */
    notes: ReleveNoteUnit[];
    /**
     * @generated from protobuf field: uint64 credits = 2;
     */
    credits: bigint;
    /**
     * @generated from protobuf field: string semestre = 3;
     */
    semestre: string;
    /**
     * @generated from protobuf field: mg.tonymushah.evalfjuil24.ReleveNoteStatus status = 4;
     */
    status: ReleveNoteStatus;
    /**
     * @generated from protobuf field: double moyenne = 5;
     */
    moyenne: number;
}
/**
 * @generated from protobuf enum mg.tonymushah.evalfjuil24.Genre
 */
export enum Genre {
    /**
     * @generated from protobuf enum value: G_AUTRE = 0;
     */
    G_AUTRE = 0,
    /**
     * @generated from protobuf enum value: G_MASCULIN = 1;
     */
    G_MASCULIN = 1,
    /**
     * @generated from protobuf enum value: G_FEMININ = 2;
     */
    G_FEMININ = 2
}
/**
 * @generated from protobuf enum mg.tonymushah.evalfjuil24.ReleveNoteUnitStatus
 */
export enum ReleveNoteUnitStatus {
    /**
     * @generated from protobuf enum value: M_VALID = 0;
     */
    M_VALID = 0,
    /**
     * @generated from protobuf enum value: M_AJOURNEE = 1;
     */
    M_AJOURNEE = 1,
    /**
     * @generated from protobuf enum value: M_COMPENSEE = 2;
     */
    M_COMPENSEE = 2
}
/**
 * @generated from protobuf enum mg.tonymushah.evalfjuil24.ReleveNoteStatus
 */
export enum ReleveNoteStatus {
    /**
     * @generated from protobuf enum value: S_VALID = 0;
     */
    S_VALID = 0,
    /**
     * @generated from protobuf enum value: S_AJOURNEE = 1;
     */
    S_AJOURNEE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("mg.tonymushah.evalfjuil24.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mg.tonymushah.evalfjuil24.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Date$Type extends MessageType<Date> {
    constructor() {
        super("mg.tonymushah.evalfjuil24.Date", [
            { no: 1, name: "jour", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "mois", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "annee", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Date>): Date {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jour = 0;
        message.mois = 0;
        message.annee = 0;
        if (value !== undefined)
            reflectionMergePartial<Date>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Date): Date {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 jour */ 1:
                    message.jour = reader.uint32();
                    break;
                case /* uint32 mois */ 2:
                    message.mois = reader.uint32();
                    break;
                case /* uint32 annee */ 3:
                    message.annee = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Date, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 jour = 1; */
        if (message.jour !== 0)
            writer.tag(1, WireType.Varint).uint32(message.jour);
        /* uint32 mois = 2; */
        if (message.mois !== 0)
            writer.tag(2, WireType.Varint).uint32(message.mois);
        /* uint32 annee = 3; */
        if (message.annee !== 0)
            writer.tag(3, WireType.Varint).uint32(message.annee);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mg.tonymushah.evalfjuil24.Date
 */
export const Date = new Date$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Etudiant$Type extends MessageType<Etudiant> {
    constructor() {
        super("mg.tonymushah.evalfjuil24.Etudiant", [
            { no: 1, name: "numero", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "prenom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "date_naissance", kind: "message", T: () => Date },
            { no: 5, name: "age", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "promotion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "genre", kind: "enum", T: () => ["mg.tonymushah.evalfjuil24.Genre", Genre] }
        ]);
    }
    create(value?: PartialMessage<Etudiant>): Etudiant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numero = "";
        message.nom = "";
        message.prenom = "";
        message.age = 0;
        message.promotion = "";
        message.genre = 0;
        if (value !== undefined)
            reflectionMergePartial<Etudiant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Etudiant): Etudiant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string numero */ 1:
                    message.numero = reader.string();
                    break;
                case /* string nom */ 2:
                    message.nom = reader.string();
                    break;
                case /* string prenom */ 3:
                    message.prenom = reader.string();
                    break;
                case /* mg.tonymushah.evalfjuil24.Date date_naissance */ 4:
                    message.dateNaissance = Date.internalBinaryRead(reader, reader.uint32(), options, message.dateNaissance);
                    break;
                case /* uint32 age */ 5:
                    message.age = reader.uint32();
                    break;
                case /* string promotion */ 6:
                    message.promotion = reader.string();
                    break;
                case /* mg.tonymushah.evalfjuil24.Genre genre */ 7:
                    message.genre = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Etudiant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string numero = 1; */
        if (message.numero !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.numero);
        /* string nom = 2; */
        if (message.nom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nom);
        /* string prenom = 3; */
        if (message.prenom !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.prenom);
        /* mg.tonymushah.evalfjuil24.Date date_naissance = 4; */
        if (message.dateNaissance)
            Date.internalBinaryWrite(message.dateNaissance, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint32 age = 5; */
        if (message.age !== 0)
            writer.tag(5, WireType.Varint).uint32(message.age);
        /* string promotion = 6; */
        if (message.promotion !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.promotion);
        /* mg.tonymushah.evalfjuil24.Genre genre = 7; */
        if (message.genre !== 0)
            writer.tag(7, WireType.Varint).int32(message.genre);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mg.tonymushah.evalfjuil24.Etudiant
 */
export const Etudiant = new Etudiant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Matiere$Type extends MessageType<Matiere> {
    constructor() {
        super("mg.tonymushah.evalfjuil24.Matiere", [
            { no: 1, name: "numero", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "credits", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Matiere>): Matiere {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.numero = "";
        message.nom = "";
        message.credits = 0;
        if (value !== undefined)
            reflectionMergePartial<Matiere>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Matiere): Matiere {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string numero */ 1:
                    message.numero = reader.string();
                    break;
                case /* string nom */ 2:
                    message.nom = reader.string();
                    break;
                case /* uint32 credits */ 3:
                    message.credits = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Matiere, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string numero = 1; */
        if (message.numero !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.numero);
        /* string nom = 2; */
        if (message.nom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nom);
        /* uint32 credits = 3; */
        if (message.credits !== 0)
            writer.tag(3, WireType.Varint).uint32(message.credits);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mg.tonymushah.evalfjuil24.Matiere
 */
export const Matiere = new Matiere$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleveNoteUnit$Type extends MessageType<ReleveNoteUnit> {
    constructor() {
        super("mg.tonymushah.evalfjuil24.ReleveNoteUnit", [
            { no: 1, name: "matiere", kind: "message", T: () => Matiere },
            { no: 2, name: "valeur", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["mg.tonymushah.evalfjuil24.ReleveNoteUnitStatus", ReleveNoteUnitStatus] }
        ]);
    }
    create(value?: PartialMessage<ReleveNoteUnit>): ReleveNoteUnit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.valeur = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<ReleveNoteUnit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleveNoteUnit): ReleveNoteUnit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mg.tonymushah.evalfjuil24.Matiere matiere */ 1:
                    message.matiere = Matiere.internalBinaryRead(reader, reader.uint32(), options, message.matiere);
                    break;
                case /* float valeur */ 2:
                    message.valeur = reader.float();
                    break;
                case /* mg.tonymushah.evalfjuil24.ReleveNoteUnitStatus status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleveNoteUnit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mg.tonymushah.evalfjuil24.Matiere matiere = 1; */
        if (message.matiere)
            Matiere.internalBinaryWrite(message.matiere, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* float valeur = 2; */
        if (message.valeur !== 0)
            writer.tag(2, WireType.Bit32).float(message.valeur);
        /* mg.tonymushah.evalfjuil24.ReleveNoteUnitStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mg.tonymushah.evalfjuil24.ReleveNoteUnit
 */
export const ReleveNoteUnit = new ReleveNoteUnit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReleveNote$Type extends MessageType<ReleveNote> {
    constructor() {
        super("mg.tonymushah.evalfjuil24.ReleveNote", [
            { no: 1, name: "notes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReleveNoteUnit },
            { no: 2, name: "credits", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "semestre", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status", kind: "enum", T: () => ["mg.tonymushah.evalfjuil24.ReleveNoteStatus", ReleveNoteStatus] },
            { no: 5, name: "moyenne", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<ReleveNote>): ReleveNote {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.notes = [];
        message.credits = 0n;
        message.semestre = "";
        message.status = 0;
        message.moyenne = 0;
        if (value !== undefined)
            reflectionMergePartial<ReleveNote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReleveNote): ReleveNote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mg.tonymushah.evalfjuil24.ReleveNoteUnit notes */ 1:
                    message.notes.push(ReleveNoteUnit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 credits */ 2:
                    message.credits = reader.uint64().toBigInt();
                    break;
                case /* string semestre */ 3:
                    message.semestre = reader.string();
                    break;
                case /* mg.tonymushah.evalfjuil24.ReleveNoteStatus status */ 4:
                    message.status = reader.int32();
                    break;
                case /* double moyenne */ 5:
                    message.moyenne = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReleveNote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mg.tonymushah.evalfjuil24.ReleveNoteUnit notes = 1; */
        for (let i = 0; i < message.notes.length; i++)
            ReleveNoteUnit.internalBinaryWrite(message.notes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 credits = 2; */
        if (message.credits !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.credits);
        /* string semestre = 3; */
        if (message.semestre !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.semestre);
        /* mg.tonymushah.evalfjuil24.ReleveNoteStatus status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* double moyenne = 5; */
        if (message.moyenne !== 0)
            writer.tag(5, WireType.Bit64).double(message.moyenne);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mg.tonymushah.evalfjuil24.ReleveNote
 */
export const ReleveNote = new ReleveNote$Type();
